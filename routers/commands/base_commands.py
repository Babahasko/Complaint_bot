import requests

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils import markdown
from aiogram.fsm.context import FSMContext
from .states import Register

from utils import logger
from routers.keyboards.base_keyboard import get_register_keyboard, get_stop_keyboard, RegisterButtonText
from routers.keyboards.actions_keyboard import  get_bot_actions_keyboard

router = Router(name=__name__)

@router.message(Command("start"))
async def start_handler(msg: Message):
    #–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —é–∑–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    params = {
        "telegramm_account": msg.from_user.username,
    }
    user = requests.get("http://127.0.0.1:8000/user/get_user/", params=params).json()
    if user:
        await msg.answer(
            text="–ù–∞—á–Ω—ë–º –∂–µ —Ä–∞–±–æ—Ç—É –ø–æ –≤–µ–¥–µ–Ω–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!",
            reply_markup=get_bot_actions_keyboard(),
        )
    else:
        await msg.answer(
            text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!",
            reply_markup=get_register_keyboard(),
        )

@router.message(F.text == RegisterButtonText.REGISTER)
@router.message(Command("register"))
async def handle_start_register(msg: Message, state: FSMContext):
    await state.set_state(Register.username)
    await msg.answer(
        text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫ –º–Ω–µ –≤–∞—Å –∑–≤–∞—Ç—å –≥–æ—Å–ø–æ–¥–∏–Ω {markdown.hbold(msg.from_user.username)}?",
        reply_markup=get_stop_keyboard(),
    )

@router.message(F.text == RegisterButtonText.STOP)
async def handle_stop_register(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å... üò¢")

@router.message(Register.username, F.text)
async def handle_register_username(msg: Message, state: FSMContext):
    await state.update_data(username=msg.text)
    await state.clear()

    new_user = {
        "telegramm_account": msg.from_user.username,
        "username": msg.text
    }
    response = requests.post("http://127.0.0.1:8000/user/register", json=new_user)
    logger.info(response.status_code)
    if response.status_code == 200:
        await msg.answer(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {markdown.hbold(msg.text)}!",
            reply_markup=get_bot_actions_keyboard(),
        )
    else:
        await msg.answer(
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üò¢"
        )

@router.message(Register.username)
async def handle_register_username_invalid_content_type(
        msg: Message,
        state: FSMContext,
):
    await state.clear()
    params = {
        "telegramm_account": msg.from_user.username,
    }
    user = requests.get("http://127.0.0.1:8000/user/get_user/", params=params).json()
    logger.info(user)
    if user:
        await msg.answer(f" {markdown.hbold("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")} \n"
                         f"–¢–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç: {user["telegramm_account"]}\n "
                         f"–ù–∏–∫: {user["username"]}")
    else:
        await msg.answer(
        f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑–æ–∫."
        )


@router.message(Command("help"))
async def help_handler(msg: Message):
    text = (
        f"{markdown.hbold("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥")}\n"
        f"/start - –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –º–µ–Ω—è\n"
        f"/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
    )
    await msg.answer(
        text=text,
    )
